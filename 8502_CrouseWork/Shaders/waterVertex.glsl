#version 330 core

// ========================================
// 输入：顶点属性
// ========================================
layout (location = 0) in vec3 aPos;       // 顶点位置
layout (location = 1) in vec3 aNormal;    // 法向量
layout (location = 2) in vec2 aTexCoord;  // 纹理坐标

// ========================================
// 输出：传递给片段着色器的数据
// ========================================
out vec3 FragPos;    // 片段的世界空间位置
out vec3 Normal;     // 法向量（世界空间，扰动后）
out vec2 TexCoord;   // 纹理坐标
out vec3 ViewDir;    // 视线方向（从片段指向相机）

// ========================================
// Uniform变量：变换矩阵
// ========================================
uniform mat4 model;       // 模型矩阵
uniform mat4 view;        // 视图矩阵
uniform mat4 projection;  // 投影矩阵
uniform vec3 viewPos;     // 相机位置（世界空间）
uniform float time;       // 时间（用于波浪动画）

void main()
{
    // ========================================
    // 1. 计算动态波浪
    // ========================================
    // 使用多个正弦波叠加创建复杂的水面波动
    vec3 pos = aPos;

    // 波浪1：主波浪（X方向）- 减小振幅让水面更平静
    float wave1 = sin(pos.x * 0.3 + time * 0.3) * 0.05;

    // 波浪2：次波浪（Z方向）- 减小振幅
    float wave2 = cos(pos.z * 0.4 + time * 0.4) * 0.04;

    // 波浪3：对角线波浪 - 减小振幅
    float wave3 = sin((pos.x + pos.z) * 0.2 + time * 0.25) * 0.03;

    // 波浪4：细节波浪 - 减小振幅和速度
    float wave4 = cos(pos.x * 0.8 - time * 0.2) * 0.02;

    // 叠加所有波浪
    pos.y += wave1 + wave2 + wave3 + wave4;

    // ========================================
    // 2. 计算扰动后的法向量（近似方法）
    // ========================================
    vec3 normal = aNormal;

    // 根据波浪计算法向量X分量扰动 - 减小扰动强度
    normal.x += cos(pos.x * 0.3 + time * 0.3) * 0.3 * 0.05;
    normal.x += sin(pos.x * 0.8 - time * 0.2) * 0.8 * 0.02;

    // 根据波浪计算法向量Z分量扰动 - 减小扰动强度
    normal.z += sin(pos.z * 0.4 + time * 0.4) * 0.4 * 0.04;

    // 归一化法向量
    normal = normalize(normal);

    // ========================================
    // 3. 变换到世界空间
    // ========================================
    FragPos = vec3(model * vec4(pos, 1.0));
    Normal = mat3(transpose(inverse(model))) * normal;
    TexCoord = aTexCoord;

    // ========================================
    // 4. 计算视线方向
    // ========================================
    ViewDir = viewPos - FragPos;

    // ========================================
    // 5. 计算最终顶点位置（裁剪空间）
    // ========================================
    gl_Position = projection * view * vec4(FragPos, 1.0);
}

// ========================================
// 补充说明：
// ========================================
// 这个着色器与地形顶点着色器非常相似
// 主要区别：
// - 水面是平面，法向量始终是 (0, 1, 0)
// - 水面可以添加波浪动画（通过修改 aPos.y）
//
// 可选的波浪效果（未实现）：
//   float wave = sin(aPos.x * 0.5 + time) * cos(aPos.z * 0.5 + time) * 0.2;
//   vec3 wavePos = aPos + vec3(0.0, wave, 0.0);
//   FragPos = vec3(model * vec4(wavePos, 1.0));
// ========================================
