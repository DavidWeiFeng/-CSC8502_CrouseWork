#version 330 core

// ========================================
// 输入：顶点属性
// ========================================
layout (location = 0) in vec3 aPos;       // 顶点位置
layout (location = 1) in vec3 aNormal;    // 法向量
layout (location = 2) in vec2 aTexCoord;  // 纹理坐标

// ========================================
// 输出：传递给片段着色器的数据
// ========================================
out vec3 FragPos;    // 片段的世界空间位置
out vec3 Normal;     // 法向量（世界空间）
out vec2 TexCoord;   // 纹理坐标

// ========================================
// Uniform变量：变换矩阵
// ========================================
uniform mat4 model;       // 模型矩阵
uniform mat4 view;        // 视图矩阵
uniform mat4 projection;  // 投影矩阵

void main()
{
    // ========================================
    // 1. 计算片段的世界空间位置
    // ========================================
    // 将顶点位置从模型空间变换到世界空间
    FragPos = vec3(model * vec4(aPos, 1.0));

    // ========================================
    // 2. 变换法向量到世界空间
    // ========================================
    // 注意：对于非均匀缩放，应该使用法线矩阵 (transpose(inverse(model)))
    // 但对于水面这种简单的平面，直接使用model矩阵就可以
    // 水面的法向量始终是 (0, 1, 0)，指向上方
    Normal = mat3(model) * aNormal;

    // ========================================
    // 3. 传递纹理坐标
    // ========================================
    TexCoord = aTexCoord;

    // ========================================
    // 4. 计算最终的顶点位置（裁剪空间）
    // ========================================
    // 完整的MVP变换：projection * view * model * position
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}

// ========================================
// 补充说明：
// ========================================
// 这个着色器与地形顶点着色器非常相似
// 主要区别：
// - 水面是平面，法向量始终是 (0, 1, 0)
// - 水面可以添加波浪动画（通过修改 aPos.y）
//
// 可选的波浪效果（未实现）：
//   float wave = sin(aPos.x * 0.5 + time) * cos(aPos.z * 0.5 + time) * 0.2;
//   vec3 wavePos = aPos + vec3(0.0, wave, 0.0);
//   FragPos = vec3(model * vec4(wavePos, 1.0));
// ========================================
