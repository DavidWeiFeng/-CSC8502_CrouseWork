#version 330 core

// ========================================
// 输入：从顶点着色器传来的数据
// ========================================
in vec3 FragPos;        // 片段的世界空间位置
in vec3 Normal;         // 法向量（世界空间）
in vec2 TexCoord;       // 纹理坐标

// ========================================
// 输出：片段的最终颜色
// ========================================
out vec4 FragColor;

// ========================================
// Uniform变量：光照参数
// ========================================
uniform vec3 lightPos;      // 光源位置（世界空间）
uniform vec3 lightColor;    // 光源颜色
uniform vec3 viewPos;       // 相机位置（世界空间）

void main()
{
    // ========================================
    // 1. 水的基础颜色
    // ========================================
    // 使用浅蓝色作为水的基础颜色
    // 可以根据需要调整RGB值
    vec3 waterColor = vec3(0.1, 0.3, 0.5);  // 深蓝色水
    // vec3 waterColor = vec3(0.2, 0.5, 0.7);  // 浅蓝色水
    // vec3 waterColor = vec3(0.0, 0.4, 0.6);  // 海洋蓝

    // ========================================
    // 2. 归一化向量
    // ========================================
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    vec3 viewDir = normalize(viewPos - FragPos);

    // ========================================
    // 3. 环境光（Ambient）
    // ========================================
    // 水面的环境光可以稍高一些，模拟天空的反射
    float ambientStrength = 0.3;
    vec3 ambient = ambientStrength * lightColor;

    // ========================================
    // 4. 漫反射（Diffuse）
    // ========================================
    // 水面的漫反射较弱，因为水主要靠反射而不是散射
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor * 0.4;  // 乘以0.4降低漫反射强度

    // ========================================
    // 5. 镜面反射（Specular）- 重点！
    // ========================================
    // 水面是光滑表面，镜面反射非常强

    // 5.1 镜面反射强度 - 水面反射强度高
    float specularStrength = 0.8;  // 0.8-1.0 表示非常光滑的表面

    // 5.2 计算反射方向
    vec3 reflectDir = reflect(-lightDir, norm);

    // 5.3 计算镜面反射系数
    // shininess = 128：非常锐利的高光，模拟光滑水面
    // 可以尝试：
    //   - 64：略微柔和的高光
    //   - 128：标准水面高光
    //   - 256：非常锐利的高光（类似镜子）
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 128);

    // 5.4 计算最终镜面反射光
    vec3 specular = specularStrength * spec * lightColor;

    // ========================================
    // 6. 组合所有光照分量
    // ========================================
    // Phong光照模型：环境光 + 漫反射 + 镜面反射
    vec3 lighting = ambient + diffuse + specular;

    // 将光照应用到水的基础颜色
    vec3 result = lighting * waterColor;

    // ========================================
    // 7. 输出最终颜色（带透明度）
    // ========================================
    // Alpha值：0.0 = 完全透明，1.0 = 完全不透明
    // 水面可以设置为半透明，这样可以看到下方的地形
    float alpha = 0.6;  // 半透明水面
    // float alpha = 0.8;  // 较不透明的水面
    // float alpha = 1.0;  // 完全不透明

    FragColor = vec4(result, alpha);
}

// ========================================
// 补充说明：
// ========================================
// 这个着色器实现了完整的Phong光照模型，针对水面特性优化
//
// 水面的光照特点：
//   1. 环境光：较高（0.3），模拟天空反射
//   2. 漫反射：较弱（0.4倍），水主要是镜面反射
//   3. 镜面反射：非常强（strength=0.8, shininess=128）
//
// 参数调整建议：
//   - 如果高光太强：降低 specularStrength 到 0.6-0.7
//   - 如果高光太弱：提高 specularStrength 到 0.9-1.0
//   - 如果高光太分散：提高 shininess 到 256
//   - 如果高光太锐利：降低 shininess 到 64
//   - 如果水太透明：提高 alpha 到 0.8-1.0
//   - 如果水太不透明：降低 alpha 到 0.4-0.5
//
// 水面颜色建议：
//   深海：vec3(0.05, 0.1, 0.3)  - 深蓝色
//   湖水：vec3(0.1, 0.3, 0.5)   - 中蓝色（当前）
//   浅水：vec3(0.2, 0.5, 0.7)   - 浅蓝绿色
//   清水：vec3(0.3, 0.6, 0.8)   - 浅蓝色
//
// 高级效果（可选扩展）：
//   - 菲涅尔效果（Fresnel）：边缘更透明，中心更反射
//   - 水波动画：在顶点着色器中添加sin/cos波动
//   - 反射天空盒：采样天空盒纹理用于环境映射
//   - 折射效果：使用折射向量采样场景
// ========================================
