#version 330 core

// ========================================
// 输入：从顶点着色器传来的数据
// ========================================
in vec3 FragPos;        // 片段的世界空间位置
in vec3 Normal;         // 法向量（世界空间）
in vec2 TexCoord;       // 纹理坐标
in vec3 ViewDir;        // 视线方向

// ========================================
// 输出：片段的最终颜色
// ========================================
out vec4 FragColor;

// ========================================
// Uniform变量
// ========================================
uniform samplerCube skybox;   // 天空盒立方体贴图
uniform vec3 waterColor;      // 水的基础颜色
uniform float time;           // 时间（可用于额外效果）

void main()
{
    // ========================================
    // 1. 归一化向量
    // ========================================
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(ViewDir);

    // ========================================
    // 2. 计算反射向量并采样天空盒
    // ========================================
    // reflect函数：计算入射光线的反射方向
    // 参数1：入射方向（从相机指向片段，所以是 -viewDir）
    // 参数2：表面法向量
    vec3 reflectDir = reflect(-viewDir, norm);

    // 采样天空盒立方体贴图
    // 使用反射方向作为纹理坐标
    vec3 reflectionColor = texture(skybox, reflectDir).rgb;

    // ========================================
    // 3. 计算菲涅尔效应（Fresnel Effect）
    // ========================================
    // 菲涅尔效应：
    // - 从正上方看水面：更透明，看到水的颜色
    // - 从侧面看水面：更反射，看到天空倒影
    //
    // 使用Schlick近似：
    // fresnel = (1 - cos(θ))^n
    // 其中 θ 是视线与法向量的夹角
    float cosTheta = max(dot(viewDir, norm), 0.0);
    float fresnel = pow(1.0 - cosTheta, 2.5);  // 降低指数让过渡更柔和

    // ========================================
    // 4. 混合反射色和水的基础色
    // ========================================
    // 使用菲涅尔系数在反射和基础色之间插值
    // fresnel = 0 （正上方）→ 更多基础色
    // fresnel = 1 （侧面）  → 更多反射色

    // 给反射色添加轻微的水色调，让反射与水体更和谐
    vec3 tintedReflection = reflectionColor * (vec3(1.0) + waterColor * 0.2);

    // 增加反射混合比例，同时提供更自然的基础混合
    vec3 baseColor = waterColor;  // 水的基础颜色
    float reflectionStrength = 0.5 + fresnel * 0.45; // 反射强度范围：0.5 - 0.95
    vec3 finalColor = mix(baseColor, tintedReflection, reflectionStrength);
    // 即使从上方看，也能看到50%的天空反射，让水面更亮

    // ========================================
    // 5. 根据观察角度调整透明度
    // ========================================
    // 从上往下看：较透明（能看到水下地形）
    // 从侧面看：较不透明（水面反射更明显）
    float alpha = 0.7 + fresnel * 0.25;
    // 基础透明度0.7，侧面增加到0.95，让水面看起来更有实体感

    // ========================================
    // 6. 输出最终颜色
    // ========================================
    FragColor = vec4(finalColor, alpha);
}

// ========================================
// 补充说明：
// ========================================
// 这个着色器实现了完整的Phong光照模型，针对水面特性优化
//
// 水面的光照特点：
//   1. 环境光：较高（0.3），模拟天空反射
//   2. 漫反射：较弱（0.4倍），水主要是镜面反射
//   3. 镜面反射：非常强（strength=0.8, shininess=128）
//
// 参数调整建议：
//   - 如果高光太强：降低 specularStrength 到 0.6-0.7
//   - 如果高光太弱：提高 specularStrength 到 0.9-1.0
//   - 如果高光太分散：提高 shininess 到 256
//   - 如果高光太锐利：降低 shininess 到 64
//   - 如果水太透明：提高 alpha 到 0.8-1.0
//   - 如果水太不透明：降低 alpha 到 0.4-0.5
//
// 水面颜色建议：
//   深海：vec3(0.05, 0.1, 0.3)  - 深蓝色
//   湖水：vec3(0.1, 0.3, 0.5)   - 中蓝色（当前）
//   浅水：vec3(0.2, 0.5, 0.7)   - 浅蓝绿色
//   清水：vec3(0.3, 0.6, 0.8)   - 浅蓝色
//
// 高级效果（可选扩展）：
//   - 菲涅尔效果（Fresnel）：边缘更透明，中心更反射
//   - 水波动画：在顶点着色器中添加sin/cos波动
//   - 反射天空盒：采样天空盒纹理用于环境映射
//   - 折射效果：使用折射向量采样场景
// ========================================
