// ========================================
// 地形片段着色器
// ========================================
// 功能：
// 1. 采样地形纹理
// 2. 计算简单的光照（环境光 + 漫反射）
// 3. 输出最终颜色
// ========================================

#version 330 core

// ========================================
// 输入：从顶点着色器传来的数据
// ========================================
in vec3 FragPos;        // 片段的世界空间位置
in vec3 Normal;         // 片段的法向量（世界空间）
in vec2 TexCoord;       // 纹理坐标

// ========================================
// 输出：片段的最终颜色
// ========================================
out vec4 FragColor;

// ========================================
// Uniform变量：从C++代码传入的参数
// ========================================
uniform sampler2D terrainTexture;   // 地形纹理（草地、泥土等）
uniform vec3 lightPos;              // 光源位置（世界空间）
uniform vec3 lightColor;            // 光源颜色
uniform vec3 viewPos;               // 相机位置（世界空间）

// ========================================
// 主函数：片段着色器的入口点
// ========================================
void main()
{
    // ========================================
    // 1. 采样纹理，获取基础颜色
    // ========================================
    // texture() 函数：
    //   参数1：纹理采样器
    //   参数2：纹理坐标 (u, v)
    //   返回：该位置的纹理颜色（RGBA）
    vec3 texColor = texture(terrainTexture, TexCoord).rgb;

    // ========================================
    // 2. 环境光（Ambient）
    // ========================================
    // 环境光 = 一个常量，模拟间接照明
    // 即使没有直接光照，物体也应该有一点亮度
    // 降低环境光，增强明暗对比，让地形更立体
    float ambientStrength = 0.15;    // 环境光强度（降低到0.15，原来是0.3）
    vec3 ambient = ambientStrength * lightColor;

    // ========================================
    // 3. 漫反射光（Diffuse）
    // ========================================
    // 漫反射：模拟光线照射到粗糙表面的效果
    // 光照强度取决于表面朝向和光线方向的夹角

    // 3.1 归一化法向量
    // 注意：从顶点着色器传来的法向量可能在插值后不是单位向量
    vec3 norm = normalize(Normal);

    // 3.2 计算光线方向（从片段指向光源）
    vec3 lightDir = normalize(lightPos - FragPos);

    // 3.3 计算漫反射系数
    // dot(norm, lightDir)：法向量和光线方向的点积
    //   - 如果表面正对光源：dot = 1.0（最亮）
    //   - 如果表面垂直光源：dot = 0.0（不受光照）
    //   - 如果表面背对光源：dot < 0（应该是0，用max截断）
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    // ========================================
    // 4. 组合所有光照分量
    // ========================================
    // 最终光照 = 环境光 + 漫反射光
    // 然后乘以纹理颜色，得到最终颜色
    vec3 lighting = ambient + diffuse;
    vec3 result = lighting * texColor;

    // ========================================
    // 5. 输出最终颜色
    // ========================================
    // vec4(result, 1.0)：RGB + Alpha（不透明度=1.0）
    FragColor = vec4(result, 1.0);
}

// ========================================
// 补充说明：
// ========================================
// 这个着色器实现了简化的Phong光照模型（不含镜面反射）
//
// 完整的Phong模型包括：
//   1. 环境光（Ambient）  - 已实现 ✓
//   2. 漫反射（Diffuse）  - 已实现 ✓
//   3. 镜面反射（Specular）- 未实现（可以后续添加）
//
// 镜面反射效果：
//   - 模拟光滑表面的高光（如水面、金属）
//   - 地形通常是粗糙的，所以暂时不需要镜面反射
//   - 如果需要，可以添加以下代码：
//
//   float specularStrength = 0.1;
//   vec3 viewDir = normalize(viewPos - FragPos);
//   vec3 reflectDir = reflect(-lightDir, norm);
//   float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
//   vec3 specular = specularStrength * spec * lightColor;
//
//   然后在lighting中加上specular即可
// ========================================
